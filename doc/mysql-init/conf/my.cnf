# 在Linux平台下, IO threads的数量不能进行调整,在Windows平台下从InnoDB 1.0.x版本开始使用如下开始调整
innodb_read_io_threads
innodb_write_io_threads

[mysqld]
# 事务被提交后,其所使用的undolog可能不再需要,因此需要PurgeThread来回收已经使用分配的undo页,InnoDB 1.1版本后,purge操作可以独立到单独的线程中进行,
# 用户可以在MySQL数据库的配置文件中添加如下命令来启用独立的PurgeThread
innodb_purge_threads=1

# 在InnoDB中,其缓冲池的配置通过配置参数innodb_buffer_pool_size来设置,通过 show variables like 'innodb_buffer_pool_size'; 来查看
innodb_buffer_pool_size=

# 通过innodb_buffer_pool_instances 来配置缓冲池实例数
innodb_buffer_pool_instances=1

# 在InnoDB存储引擎下称为midpoint insertion strategy. 在默认配置下,该位置在LRU列表长度的5/8处.midpoint位置可由如下参数控制
innodb_old_blocks_pct=37

# Sharp Checkpoint发生在数据库关闭时将所有的脏页都刷新回磁盘
innodb_fast_shutdown=1

# FLUSH_LRU_LIST checkpoint是因为InnoDB存储引擎需要保证LRU列表中需要有差不多100个空闲页可供使用.如果没有100个可用空闲页, 那么InnoDB
# 存储引擎会讲LRU列表 尾端的页移除.如果这些页中有脏也,那么需要进行Checkpoint,而这些页是来自LRU列表的,因此称为FLUSH_LRU_LIST Checkpoint
# 从MySQL 5.6版本,也就是InnoDB 1.2.x版本开始,这个检查被放在一个单独的Page Cleaner线程中进行,并且通过innodb_lru_scan_depath控制LRU列
# 表中可用页的数量,该值默认为1024
innodb_lru_scan_depath=1024

# Dirty Page too much, 即脏页的数量太多,导致InnoDB存储引擎强制进行Checkpoint.其目的总的来说还是为了保证缓冲池中有足够可用的页,
# innodb_max_dirty_pages_pct值为75,当缓冲池中脏页的数据量占据75%,强制进行Checkpoint,刷新一部分的脏页到磁盘,InnoDB 1.0.x之前默认值为
# 90, 之后的版本都是75
innodb_max_dirty_pages_pct=75

# innodb_io_capacity用来表示磁盘IO的吞吐量,默认值为200. 对于刷新搭配磁盘的页的数量会按照innodb_io_capacity的百分比来进行控制.规则如下:
# 1.在合并插入缓存时,合并插入缓冲的数量为innodb_io_capacity值的 5%
# 2.在从缓冲区刷新脏页时,刷新脏页的数量为innodb_io_capacity
innodb_io_capacity=200

# 通过参数innodb_change_buffer_max_size来控制Change Buffer最大使用内存的数量,默认值为25,表示最多使用1/4的缓冲池内存空间.该参数最大有效值为50
innodb_change_buffer_max_size=25

# InnoDB 1.1.x开始,提供了内核级别AIO的支持,称为Native AIO.因此编译或者运行该版本MySQL时,需要libaio库的支持.Windoows系统和Linux系统都
# 提供了Native AIO支持,而Mac OSX系统则未提供.官方的测试显示,启用Native AIO,恢复速度可以提高75%.在InnoDB存储引擎中,read ahead方式的读取
# 都是通过AIO完成,脏页的刷新,即磁盘的写入操作则全部都由AIO完成.
innodb_use_native_aio=ON

# 刷新邻接页, InnoDB存储引擎会检测该页所在区(extent)的所有页,如果是脏页,那么一起进行刷新,通过AIO可将多个IO写入操作合并为一个IO操作,顾该工作
# 机制在传统机械磁盘下有着显著的优势.而对于固态硬盘有着超高IOPS性能磁盘,则建议将参数设置为0,即关闭此特性
innodb_flush_neighbors

# 影响着表的存储引擎为InnoDB的行为. 该参数可取值为0、1、2,默认值为 1
# 0: 表示在MySQL数据库关闭时,InnoDB需要完成所有的full purge和merge insert buffer,并且将所有的脏页刷新回磁盘.这需要一些时间,有时甚至需
# 要几个小时来完成. 如果在进行InnoDB升级时,必须将这个参数调为 0,然后在关闭数据库
# 1: 默认值,表示不需要完成上述的full purge和merge insert buffer操作,但是在缓冲池中的一些数据脏页还是会刷新回磁盘
# 2: 不完成full page和merge insert buffer操作,也不将缓冲池中的数据脏页写回磁盘,而是将日志都写入日志文件.这样不会有任何事务的丢失,但是下次
# MySQL数据库启动时,会进行恢复操作(recovery)
innodb_fast_shutdown=1

# 影响了整个InnoDB存储引擎恢复的状况,该参数为默认值为0,代表当发生需要恢复时,进行所有的恢复操作,当不能进行有效恢复时,把错误写入错误日志中去
# 1(SRV_FORCE_IGNORE_CORRUPT)忽略检查到的corrupt页
# 2(SRV_FORCE_NO_BACKGROUND)阻止Master Thread线程的运行, 如Master Thread线程需要进行full purge才做,而这会导致crash.
# 3(SRV_FORCE_NO_TRX_UNDO)不进行事务的回滚操作
# 4(SRV_FORCE_NO_IBUF_MERGE) 不进行插入缓冲的合并操作
# 5(SRV_FORCE_NO_UNDO_LOG_SCAN) 不查看撤销日志(Undo Log),InnoDB存储引擎会将未提交的事务视为已提交
# 6(SRV_FORCE_NO_LOG_REDO) 不进行前滚的操作
# 需要注意的是, 在设置了参数innodb_force_recovery大于0后,用户可以对表进行select、create、drop操作,但insert、update、delete这类DML操作是不允许的
innodb_force_recovery=0